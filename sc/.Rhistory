theme_grey(base_size = 40,)+
NoLegend()+
scale_color_manual(values=c("#584B9F", "#BAEEAE", "#FCDE85", "#ED820A", "#A71B4B"))+
theme(axis.title=element_blank(),
axis.text.x=element_blank(), strip.background = element_rect(fill = "white", colour = NA))+
scale_y_log10(breaks=c(0.01,0.1,1,10), labels=c("0.01","0.1","1","10"))
lineage_cds <- cds_subset[rowData(cds_subset)$gene_short_name %in% "NES",]
p[[2]] <- my_plot_genes(lineage_cds, color_cells_by="new_order", cell_size = 4, line.size=2)+theme_grey(base_size = 40)+NoLegend()+scale_color_manual(values=c("#584B9F", "#BAEEAE", "#FCDE85", "#ED820A", "#A71B4B"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(), strip.background = element_rect(fill = "white", colour = NA))
lineage_cds <- cds_subset[rowData(cds_subset)$gene_short_name %in% "TUBB3",]
p[[3]] <- my_plot_genes(lineage_cds, color_cells_by="new_order", cell_size = 4, line.size=2)+theme_grey(base_size = 40)+NoLegend()+scale_color_manual(values=c("#584B9F", "#BAEEAE", "#FCDE85", "#ED820A", "#A71B4B"))+
theme(axis.title=element_blank(),strip.background = element_rect(fill = "white", colour = NA))
lineage_cds <- cds_subset[rowData(cds_subset)$gene_short_name %in% "DCX",]
p[[4]] <- my_plot_genes(lineage_cds, color_cells_by="new_order", cell_size = 4, line.size=2)+theme_grey(base_size = 40)+NoLegend()+scale_color_manual(values=c("#584B9F", "#BAEEAE", "#FCDE85", "#ED820A", "#A71B4B"))+
theme(axis.title=element_blank(),
axis.text.x=element_blank(), strip.background = element_rect(fill = "white", colour = NA))
lineage_cds <- cds_subset[rowData(cds_subset)$gene_short_name %in% "SNAP25",]
p[[5]] <- my_plot_genes(lineage_cds, color_cells_by="new_order", cell_size = 4, line.size=2)+theme_grey(base_size = 40)+NoLegend()+scale_color_manual(values=c("#584B9F", "#BAEEAE", "#FCDE85", "#ED820A", "#A71B4B"))+
theme(axis.title=element_blank(),
axis.text.x=element_blank(), strip.background = element_rect(fill = "white", colour = NA))
lineage_cds <- cds_subset[rowData(cds_subset)$gene_short_name %in% "SYN1",]
p[[6]] <- my_plot_genes(lineage_cds, color_cells_by="new_order", cell_size = 4, line.size=2)+theme_grey(base_size = 40)+NoLegend()+scale_color_manual(values=c("#584B9F", "#BAEEAE", "#FCDE85", "#ED820A", "#A71B4B"))+
theme(axis.title=element_blank(), strip.background = element_rect(fill = "white", colour = NA))
wrap_plots(p[1:3], ncol=1)
wrap_plots(p[4:6], ncol=1)
genes <- c("MKI67", "SOX2", "HES1", "HES5", "NES", "PAX6", "TUBB3", "STMN1", "FAT3", "DCX", "RBFOX3", "MAPT", "SNAP25", "CAMK2A", "CAMK4", "NRXN1", "NCAM1", "DLG4", "SYP", "SYN1", "SYT1", "ANK3", "SPTBN4", "SCN2A", "GRIN1", "GRIN2B", "GRIA1", "GRIA2", "GABRA3", "GABRB2", "ARC", "NPAS4", "FOXG1")
DoMultiBarHeatmap2 <- function(object, features = NULL, cells = NULL, group.by = "ident",
additional.group.by = NULL, additional.group.sort.by = NULL, cols.use = NULL,
group.bar = TRUE, disp.min = -2.5, disp.max = NULL, slot = "scale.data", assay = NULL,
label = TRUE, size = 5.5, hjust = 0, angle = 45, raster = TRUE, draw.lines = TRUE,
lines.width = NULL, group.bar.height = 0.02, combine = TRUE, group.name=NULL, additional.group.name=NULL) {
cells <- cells %||% colnames(x = object)
if (is.numeric(x = cells)) {
cells <- colnames(x = object)[cells]
}
assay <- assay %||% DefaultAssay(object = object)
DefaultAssay(object = object) <- assay
features <- features %||% VariableFeatures(object = object)
features <- rev(x = unique(x = features))
disp.max <- disp.max %||% ifelse(test = slot == "scale.data", yes = 2.5, no = 6)
possible.features <- rownames(x = GetAssayData(object = object, slot = slot))
if (any(!features %in% possible.features)) {
bad.features <- features[!features %in% possible.features]
features <- features[features %in% possible.features]
if (length(x = features) == 0) {
stop("No requested features found in the ", slot, " slot for the ", assay,
" assay.")
}
warning("The following features were omitted as they were not found in the ",
slot, " slot for the ", assay, " assay: ", paste(bad.features, collapse = ", "))
}
if (!is.null(additional.group.sort.by)) {
if (any(!additional.group.sort.by %in% additional.group.by)) {
bad.sorts <- additional.group.sort.by[!additional.group.sort.by %in%
additional.group.by]
additional.group.sort.by <- additional.group.sort.by[additional.group.sort.by %in%
additional.group.by]
if (length(x = bad.sorts) > 0) {
warning("The following additional sorts were omitted as they were not a subset of additional.group.by : ",
paste(bad.sorts, collapse = ", "))
}
}
}
data <- as.data.frame(x = as.matrix(x = t(x = GetAssayData(object = object, slot = slot)[features,
cells, drop = FALSE])))
object <- suppressMessages(expr = StashIdent(object = object, save.name = "ident"))
group.by <- group.by %||% "ident"
groups.use <- object[[c(group.by, additional.group.by[!additional.group.by %in%
group.by])]][cells, , drop = FALSE]
plots <- list()
for (i in group.by) {
data.group <- data
if (!is_null(additional.group.by)) {
additional.group.use <- additional.group.by[additional.group.by != i]
if (!is_null(additional.group.sort.by)) {
additional.sort.use = additional.group.sort.by[additional.group.sort.by !=
i]
} else {
additional.sort.use = NULL
}
} else {
additional.group.use = NULL
additional.sort.use = NULL
}
group.use <- groups.use[, c(i, additional.group.use), drop = FALSE]
for (colname in colnames(group.use)) {
if (!is.factor(x = group.use[[colname]])) {
group.use[[colname]] <- factor(x = group.use[[colname]])
}
}
if (draw.lines) {
lines.width <- lines.width %||% ceiling(x = nrow(x = data.group) * 0.0025)
placeholder.cells <- sapply(X = 1:(length(x = levels(x = group.use[[i]])) *
lines.width), FUN = function(x) {
return(Seurat:::RandomName(length = 20))
})
placeholder.groups <- data.frame(rep(x = levels(x = group.use[[i]]),
times = lines.width))
group.levels <- list()
group.levels[[i]] = levels(x = group.use[[i]])
for (j in additional.group.use) {
group.levels[[j]] <- levels(x = group.use[[j]])
placeholder.groups[[j]] = NA
}
colnames(placeholder.groups) <- colnames(group.use)
rownames(placeholder.groups) <- placeholder.cells
group.use <- sapply(group.use, as.vector)
rownames(x = group.use) <- cells
group.use <- rbind(group.use, placeholder.groups)
for (j in names(group.levels)) {
group.use[[j]] <- factor(x = group.use[[j]], levels = group.levels[[j]])
}
na.data.group <- matrix(data = NA, nrow = length(x = placeholder.cells),
ncol = ncol(x = data.group), dimnames = list(placeholder.cells, colnames(x = data.group)))
data.group <- rbind(data.group, na.data.group)
}
order_expr <- paste0("order(", paste(c(i, additional.sort.use), collapse = ","),
")")
group.use = with(group.use, group.use[eval(parse(text = order_expr)), , drop = F])
plot <- Seurat:::SingleRasterMap(data = data.group, raster = raster, disp.min = disp.min,
disp.max = disp.max, feature.order = features, cell.order = rownames(x = group.use),
group.by = group.use[[i]])
if (group.bar) {
pbuild <- ggplot_build(plot = plot)
group.use2 <- group.use
cols <- list()
na.group <- Seurat:::RandomName(length = 20)
for (colname in rev(x = colnames(group.use2))) {
if (colname == i) {
colid = group.name
} else {
colid = additional.group.name
}
# Default
cols[[colname]] <- c((scales::hue_pal())(length(x = levels(x = group.use[[colname]]))))
# Overwrite if better value is provided
if (!is_null(cols.use[[colname]])) {
req_length = length(x = levels(group.use))
if (length(cols.use[[colname]]) < req_length) {
warning("Cannot use provided colors for ", colname, " since there aren't enough colors.")
} else {
if (!is_null(names(cols.use[[colname]]))) {
if (all(levels(group.use[[colname]]) %in% names(cols.use[[colname]]))) {
cols[[colname]] <- as.vector(cols.use[[colname]][levels(group.use[[colname]])])
} else {
warning("Cannot use provided colors for ", colname, " since all levels (",
paste(levels(group.use[[colname]]), collapse = ","), ") are not represented.")
}
} else {
cols[[colname]] <- as.vector(cols.use[[colname]])[c(1:length(x = levels(x = group.use[[colname]])))]
}
}
}
# Add white if there's lines
if (draw.lines) {
levels(x = group.use2[[colname]]) <- c(levels(x = group.use2[[colname]]),
na.group)
group.use2[placeholder.cells, colname] <- na.group
cols[[colname]] <- c(cols[[colname]], "#FFFFFF")
}
names(x = cols[[colname]]) <- levels(x = group.use2[[colname]])
y.range <- diff(x = pbuild$layout$panel_params[[1]]$y.range)
y.pos <- max(pbuild$layout$panel_params[[1]]$y.range) + y.range *
0.015
y.max <- y.pos + group.bar.height * y.range
pbuild$layout$panel_params[[1]]$y.range <- c(pbuild$layout$panel_params[[1]]$y.range[1],
y.max)
plot <- suppressMessages(plot + annotation_raster(raster = t(x = cols[[colname]][group.use2[[colname]]]),
xmin = -Inf, xmax = Inf, ymin = y.pos, ymax = y.max) + annotation_custom(grob = grid::textGrob(label = colid,
hjust = 0, gp = gpar(cex = 0.75)), ymin = mean(c(y.pos, y.max)),
ymax = mean(c(y.pos, y.max)), xmin = Inf, xmax = Inf) + coord_cartesian(ylim = c(0,
y.max), clip = "off"))
if ((colname == i) && label) {
x.max <- max(pbuild$layout$panel_params[[1]]$x.range)
x.divs <- pbuild$layout$panel_params[[1]]$x.major %||% pbuild$layout$panel_params[[1]]$x$break_positions()
group.use$x <- x.divs
label.x.pos <- tapply(X = group.use$x, INDEX = group.use[[colname]],
FUN = median) * x.max
label.x.pos <- data.frame(group = names(x = label.x.pos), label.x.pos)
plot <- plot + geom_text(stat = "identity", data = label.x.pos,
aes_string(label = "group", x = "label.x.pos"), y = y.max + y.max *
0.03 * 0.5, angle = angle, hjust = hjust, size = size)
plot <- suppressMessages(plot + coord_cartesian(ylim = c(0, y.max +
y.max * 0.002 * max(nchar(x = levels(x = group.use[[colname]]))) *
size), clip = "off"))
}
}
}
plot <- plot + theme(line = element_blank())
plots[[i]] <- plot
}
if (combine) {
plots <- CombinePlots(plots = plots)
}
return(plots)
}
boost_subset <- subset(boost, new_order %in% c("1", "2", "3", "4", "5"))
cols.use <- list(pseudotime=plasma(length(boost_subset$pseudotime)), ident=cols.cluster)
DoMultiBarHeatmap2(boost_subset, features = genes,group.by = "pseudotime", additional.group.by = "ident", draw.lines = FALSE, label=FALSE, cols.use = cols.use, raster = FALSE)+
scale_fill_viridis_c(option="viridis")+
NoLegend()+
theme(axis.text=element_text(size=14,colour = "black"))+
scale_y_discrete(position = "left")+
geom_hline(yintercept = c(3.5, 9.5, 12.5, 16.5, 23.5, 27.5), color="white", size=1)
DoHeatmap(boost_subset, features = genes, group.by="ident", draw.lines = FALSE, label=FALSE, raster = FALSE)+
scale_fill_viridis_c(option="viridis")+
theme(legend.text = element_text(size = 20), legend.key.size = unit(0.8, "cm"), legend.text.align = 1, legend.title = element_text(size=30))
genes <- c("GFAP", "SLC1A3", "S100B", "ALDH1L1")
p <- VlnPlot(boost_subset, features = genes, group.by = "new_order", pt.size = 0.1, cols=cols.cluster, combine=F)#+NoLegend()+xlab("")#+theme(axis.text.x = element_text(angle = 0,  hjust = 0.5))
#patchwork <- wrap_plots(p, byrow = T)
p[[1]]+
scale_y_continuous(breaks=c(0.0, 0.3,0.6, 0.9))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[2]]+
#scale_y_continuous(breaks=c(0.0, 0.3,0.6, 0.9))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[3]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[4]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
sub <- subset(boost, idents=c("2", "3", "4", "5"))
a <- VlnPlot(sub, features = "NMIoverall", pt.size = 0.1, cols = cols.cluster[2:5])+
NoLegend()+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ggtitle("NMI")+
ylab("")
b <- VlnPlot(sub, features = "NMIdiscriminable", pt.size = 0.1, cols = cols.cluster[2:5])+
NoLegend()+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ggtitle("Discriminating NMI")+
ylab("")
c <- VlnPlot(sub, features = "NMIactivity", pt.size = 0.1, cols = cols.cluster[2:5])+
NoLegend()+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ggtitle("Functionality index")+
ylab("")
# pw <- (a/b/c)&theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=25))&xlab("")
# pw&theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=22))&xlab("")&ylab("")
b+
scale_y_continuous(breaks=c(0.49, 0.52, 0.55))
c
genes <- c("CASP2", "CASP3", "CASP6")
p <- VlnPlot(boost_subset, features = genes, group.by = "new_order", pt.size = 0.1, cols=cols.cluster, combine=FALSE)#+
#   NoLegend()+
#   xlab("")#+theme(axis.text.x = element_text(angle = 0,  hjust = 0.5))
# patchwork <- wrap_plots(p, byrow = T)
p[[1]]+
#scale_y_continuous(breaks=c(0.0, 0.3, 0.6, 0.9))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[2]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[3]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
genes <- c("PARP1", "ACIN1")
p <- VlnPlot(boost_subset, features = genes, group.by = "new_order", pt.size = 0.1, cols=cols.cluster, combine=FALSE)
#+NoLegend()+xlab("")#+theme(axis.text.x = element_text(angle = 0,  hjust = 0.5))
#patchwork <- wrap_plots(p, byrow = T)
p[[1]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0), labels=c("0.0", "1.0", "2.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[2]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0), labels=c("0.0", "1.0", "2.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
genes <- c("BAX", "BCL2", "BAK1", "CYCS")
p <- VlnPlot(boost_subset, features = genes, group.by = "new_order", pt.size = 0.1, cols=cols.cluster)#+NoLegend()+xlab("")#+theme(axis.text.x = element_text(angle = 0,  hjust = 0.5))
p[[1]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0), labels=c("0.0", "1.0", "2.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[2]]+
scale_y_continuous(breaks=c(0.0, 0.4, 0.8, 1.2))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[3]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0), labels=c("0.0", "1.0", "2.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[4]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
genes <- c("BIRC2", "XIAP", "BIRC5", "BIRC6", "AREL1")
p <- VlnPlot(boost_subset, features = genes, group.by = "new_order", pt.size = 0.1, cols=cols.cluster, combine=F)#+NoLegend()+xlab("")#+theme(axis.text.x = element_text(angle = 0,  hjust = 0.5))
p[[1]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[2]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0), labels=c("0.0", "1.0", "2.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[3]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0), labels=c("0.0", "1.0", "2.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[4]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[5]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
genes <- c("XAF1", "HTRA2", "SIVA1", "SIAH1", "USP11")
p <- VlnPlot(boost_subset, features = genes, group.by = "new_order", pt.size = 0.1, cols=cols.cluster)#+NoLegend()+xlab("")#+theme(axis.text.x = element_text(angle = 0,  hjust = 0.5))
p[[1]]+
scale_y_continuous(breaks=c(0.0, 0.4, 0.8))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[2]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[3]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0), labels=c("0.0", "1.0", "2.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[4]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0), labels=c("0.0", "1.0", "2.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[5]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels=c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
genes <- c("HSPA5", "HSPB1", "HSP90AB1")
p <- VlnPlot(boost_subset, features = genes, group.by = "new_order", pt.size = 0.1, cols=cols.cluster)#+NoLegend()+xlab("")#+theme(axis.text.x = element_text(angle = 0,  hjust = 0.5))
p[[1]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels = c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[2]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels = c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[3]]+
scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0, 4.0), labels = c("0.0", "1.0", "2.0", "3.0", "4.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
genes <- c("GFPT1", "GFPT2")
p <- VlnPlot(boost_subset, features = genes, group.by = "new_order", pt.size = 0.1, cols=cols.cluster)#+NoLegend()+xlab("")#+theme(axis.text.x = element_text(angle = 0,  hjust = 0.5))
p[[1]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels = c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
p[[2]]+
#scale_y_continuous(breaks=c(0.0, 1.0, 2.0, 3.0), labels = c("0.0", "1.0", "2.0", "3.0"))+
theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=18))+
xlab("")+
ylab("")+
NoLegend()
marker_c6 <- FindMarkers(boost, ident.1 = "6")
ens.str <- row.names(marker_c6)
marker_c6$ENTREZ <- mapIds(org.Hs.eg.db,
keys=ens.str,
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
sigGenes <- marker_c6 %>% filter(p_val_adj<0.05) %>% select("ENTREZ")
sigGenes <- marker_c6$ENTREZ[marker_c6$p_val_adj < 0.05 & !is.na(marker_c6$p_val_adj)]
sigGenes <- na.exclude(sigGenes)
#kk <- enrichGO(gene = sigGenes, ont="BP", OrgDb = "org.Hs.eg.db")
kk <- enrichGO(gene = sigGenes, ont="BP", OrgDb = "org.Hs.eg.db")
kk2foldchange <- function(kk){
GO <- as.data.frame(kk)
GeneRatio <- strsplit(GO$GeneRatio,"/")
GRdf <- data.frame()
for (i in seq_along(GeneRatio)){
GRdf[i,1] <- GeneRatio[[i]][1]
GRdf[i,2] <- GeneRatio[[i]][2]
}
GRdf$V1 <- as.numeric(GRdf$V1)
GRdf$V2 <- as.numeric(GRdf$V2)
GO$GeneRatio2 <- GRdf$V1/GRdf$V2
BgRatio <- strsplit(GO$BgRatio,"/")
BgRdf <- data.frame()
for (i in seq_along(BgRatio)){
BgRdf[i,1] <- BgRatio[[i]][1]
BgRdf[i,2] <- BgRatio[[i]][2]
}
BgRdf$V1 <- as.numeric(BgRdf$V1)
BgRdf$V2 <- as.numeric(BgRdf$V2)
GO$BgRatio2 <- BgRdf$V1/BgRdf$V2
GO$foldchange <- GO$GeneRatio2/GO$BgRatio2
return(GO)
}
GO <- kk2foldchange(kk)
bp_filter <- c("regulation of cellular amino acid metabolic process", "regulation of transcription from RNA polymerase II promoter in response to hypoxia", "alternative mRNA splicing, via spliceosome", "regulation of transcription from RNA polymerase II promoter in response to stress", "regulation of DNA-templated transcription in response to stress")
GO_sub <- filter(GO, Description %in% bp_filter)
GO_sub <- GO_sub[match(bp_filter, GO_sub$Description),]
my_GO_plot <- function(GO_sub) {
ggplot(GO_sub, aes(foldchange, stringr::str_wrap(Description, 40))) +
geom_col(aes(fill = p.adjust), width=0.7) +
theme_minimal(base_size = 18) +
xlab("fold enrichment") +
ylab("") +
labs(fill = "p.adjust")
}
BP <- my_GO_plot(GO_sub)+
scale_fill_continuous(breaks=c(7.5e-16,5.5e-15, 10e-15, 1.5e-14))+
scale_y_discrete(limits=rev(stringr::str_wrap(GO_sub$Description, 40)))
kk <- enrichGO(gene = sigGenes, ont="MF", OrgDb = "org.Hs.eg.db")
GO <- kk2foldchange(kk)
mf_filter <- c("threonine-type endopeptidase activity", "myosin V binding", "translation initiation factor activity", "threonine-type peptidase activity", "translation factor activity, RNA binding", "unfolded protein binding", "heat shock protein binding", "ubiquitin protein ligase binding")
GO_sub <- filter(GO, Description %in% mf_filter)
GO_sub <- GO_sub[match(mf_filter, GO_sub$Description),]
MF <- my_GO_plot(GO_sub)+
scale_fill_continuous(breaks=c(0.4e-03,0.8e-03, 1.2e-03, 1.6e-03), labels=c("0.4e-03","0.8e-03", "1.2e-03", "1.6e-03"))+
scale_y_discrete(limits=rev(stringr::str_wrap(GO_sub$Description, 40)))
kk <- enrichGO(gene = sigGenes, ont="CC", OrgDb = "org.Hs.eg.db")
GO <- kk2foldchange(kk)
cc_filter <- c("proteasome regulatory particle", "proteasome accessory complex", "proteasome core complex", "U2-type catalytic step 2 spliceosome", "proteasome complex")
GO_sub <- filter(GO, Description %in% cc_filter)
GO_sub <- GO_sub[match(cc_filter, GO_sub$Description),]
CC <- my_GO_plot(GO_sub)+
scale_y_discrete(limits=rev(stringr::str_wrap(GO_sub$Description, 40)))
BP/MF/CC+plot_layout(heights = c(5, 8, 5))
## Suppl. Fig. 1 E: Heatmap of scRNA-seq cluster marker in RNAseq data
# Top10 sc cluster marker in bulk data
#markers <- FindAllMarkers(boost)
# markers_c1 <- filter(markers, cluster==1)[1:10,"gene"]
# markers_c2 <- filter(markers, cluster==2)[1:11,"gene"]
# markers_c3 <- filter(markers, cluster==3)[1:10,"gene"]
# markers_c4 <- filter(markers, cluster==4)[1:11,"gene"]
# markers_c5 <- filter(markers, cluster==5)[1:12,"gene"]
# markers_c6 <- filter(markers, cluster==6)[1:10,"gene"]
# marker_list <- c(markers_c1, markers_c2, markers_c3, markers_c4, markers_c5, markers_c6)
# dds <- readRDS("../../bulk/data/dds.rds")
# ncounts1 <- dds[dds@rowRanges@elementMetadata@listData[["gene_symbol"]] %in% marker_list]
# ncounts <- counts(ncounts1, normalize=T)
# rownames(ncounts) <- ncounts1@rowRanges@elementMetadata@listData[["gene_symbol"]]
# colnames(ncounts) <- c("NPC_1", "d5_1", "d25_1", "d45_1", "NPC_2", "NPC_3", "d5_2", "d25_2", "d45_2","d5_3", "d25_3", "d45_3")
# ncounts <- ncounts[,c(1,5,6,2,7,10,3,8,11,4,9,12)]
# ncounts <- ncounts[match(marker_list, rownames(ncounts)),]
# ncounts <- na.omit(ncounts)
# p <- coolmap(ncounts, linkage.col = "none", linkage.row = "none", col=viridis(100), cexRow=2, margins = c(5, 10), cexCol=2, lmat = rbind(c(0,3),c(2,1),c(0,4)), lwid = c(0.5,4), lhei = c(0.5,4,0.5), main="", show.dendrogram = "none", rowsep=c(10,20, 30, 40, 50))
## Suppl. Fig. 3 A, C-E: Violin Plots
# genes <- c("BCL2L2", "BID", "BAD", "BCL2L11", "BBC3", "PMAIP1", "HRK", "BMF", "BIK", "BOK", "CYCS", "NAIP", "XAF")
# p <- VlnPlot(boost, features = genes, group.by = "new_order", pt.size = 0.1, cols=cols.cluster)+NoLegend()+xlab("")#+theme(axis.text.x = element_text(angle = 0,  hjust = 0.5))
# patchwork <- wrap_plots(p, byrow = T)
# patchwork&theme(axis.text.x = element_text(angle = 0,  hjust = 0.5),axis.text=element_text(size=20), plot.title=element_text(size=22))&xlab("")&ylab("")
