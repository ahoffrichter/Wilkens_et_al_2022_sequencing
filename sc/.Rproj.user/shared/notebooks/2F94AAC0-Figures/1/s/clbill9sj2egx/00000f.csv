"0","my_plot_genes <- function (cds_subset, min_expr = NULL, cell_size = 0.75, nrow = NULL,"
"0","                           ncol = 1, panel_order = NULL, color_cells_by = ""pseudotime"","
"0","                           trend_formula = ""~ splines::ns(pseudotime, df=3)"", label_by_short_name = TRUE,"
"0","                           vertical_jitter = NULL, horizontal_jitter = NULL, line.size=NULL)"
"0","{"
"0","  assertthat::assert_that(methods::is(cds_subset, ""cell_data_set""))"
"0","  tryCatch({"
"0","    pseudotime(cds_subset)"
"0","  }, error = function(x) {"
"0","    stop(paste(""No pseudotime calculated. Must call order_cells first.""))"
"0","  })"
"0","  colData(cds_subset)$pseudotime <- pseudotime(cds_subset)"
"0","  if (!is.null(min_expr)) {"
"0","    assertthat::assert_that(assertthat::is.number(min_expr))"
"0","  }"
"0","  assertthat::assert_that(assertthat::is.number(cell_size))"
"0","  if (!is.null(nrow)) {"
"0","    assertthat::assert_that(assertthat::is.count(nrow))"
"0","  }"
"0","  assertthat::assert_that(assertthat::is.count(ncol))"
"0","  assertthat::assert_that(is.logical(label_by_short_name))"
"0","  if (label_by_short_name) {"
"0","    assertthat::assert_that(""gene_short_name"" %in% names(rowData(cds_subset)),"
"0","                            msg = paste(""When label_by_short_name = TRUE,"", ""rowData must have a column of gene"","
"0","                                        ""names called gene_short_name.""))"
"0","  }"
"0","  assertthat::assert_that(color_cells_by %in% c(""cluster"","
"0","                                                ""partition"") | color_cells_by %in% names(colData(cds_subset)),"
"0","                          msg = paste(""color_cells_by must be a column in the"","
"0","                                      ""colData table.""))"
"0","  if (!is.null(panel_order)) {"
"0","    if (label_by_short_name) {"
"0","      assertthat::assert_that(all(panel_order %in% rowData(cds_subset)$gene_short_name))"
"0","    }"
"0","    else {"
"0","      assertthat::assert_that(all(panel_order %in% row.names(rowData(cds_subset))))"
"0","    }"
"0","  }"
"0","  assertthat::assert_that(nrow(rowData(cds_subset)) <= 100,"
"0","                          msg = paste(""cds_subset has more than 100 genes -"", ""pass only the subset of the CDS to be"","
"0","                                      ""plotted.""))"
"0","  assertthat::assert_that(methods::is(cds_subset, ""cell_data_set""))"
"0","  assertthat::assert_that(""pseudotime"" %in% names(colData(cds_subset)),"
"0","                          msg = paste(""pseudotime must be a column in"", ""colData. Please run order_cells"","
"0","                                      ""before running"", ""plot_genes_in_pseudotime.""))"
"0","  if (!is.null(min_expr)) {"
"0","    assertthat::assert_that(assertthat::is.number(min_expr))"
"0","  }"
"0","  assertthat::assert_that(assertthat::is.number(cell_size))"
"0","  assertthat::assert_that(!is.null(size_factors(cds_subset)))"
"0","  if (!is.null(nrow)) {"
"0","    assertthat::assert_that(assertthat::is.count(nrow))"
"0","  }"
"0","  assertthat::assert_that(assertthat::is.count(ncol))"
"0","  assertthat::assert_that(is.logical(label_by_short_name))"
"0","  if (label_by_short_name) {"
"0","    assertthat::assert_that(""gene_short_name"" %in% names(rowData(cds_subset)),"
"0","                            msg = paste(""When label_by_short_name = TRUE,"", ""rowData must have a column of gene"","
"0","                                        ""names called gene_short_name.""))"
"0","  }"
"0","  assertthat::assert_that(color_cells_by %in% c(""cluster"","
"0","                                                ""partition"") | color_cells_by %in% names(colData(cds_subset)),"
"0","                          msg = paste(""color_cells_by must be a column in the"","
"0","                                      ""colData table.""))"
"0","  if (!is.null(panel_order)) {"
"0","    if (label_by_short_name) {"
"0","      assertthat::assert_that(all(panel_order %in% rowData(cds_subset)$gene_short_name))"
"0","    }"
"0","    else {"
"0","      assertthat::assert_that(all(panel_order %in% row.names(rowData(cds_subset))))"
"0","    }"
"0","  }"
"0","  assertthat::assert_that(nrow(rowData(cds_subset)) <= 100,"
"0","                          msg = paste(""cds_subset has more than 100 genes -"", ""pass only the subset of the CDS to be"","
"0","                                      ""plotted.""))"
"0","  f_id <- NA"
"0","  Cell <- NA"
"0","  cds_subset = cds_subset[, is.finite(colData(cds_subset)$pseudotime)]"
"0",""
"0",""
"0","  cds_exprs <- SingleCellExperiment::counts(cds_subset)"
"0","  cds_exprs <- Matrix::t(Matrix::t(cds_exprs)/size_factors(cds_subset))"
"0","  cds_exprs <- reshape2::melt(round(as.matrix(cds_exprs)))"
"0","  if (is.null(min_expr)) {"
"0","    min_expr <- 0"
"0","  }"
"0","  colnames(cds_exprs) <- c(""f_id"", ""Cell"", ""expression"")"
"0","  cds_colData <- colData(cds_subset)"
"0","  cds_rowData <- rowData(cds_subset)"
"0",""
"0","  cds_exprs <- as.data.frame(merge(cds_exprs, cds_rowData, by.x = ""f_id"","
"0","                                   by.y = ""row.names""))"
"0",""
"0",""
"0","  cds_exprs <- as.data.frame(merge(cds_exprs, cds_colData, by.x = ""Cell"","
"0","                                   by.y = ""row.names""))"
"0",""
"0",""
"0",""
"0","  cds_exprs$adjusted_expression <- cds_exprs$expression"
"0","  if (label_by_short_name == TRUE) {"
"0","    if (is.null(cds_exprs$gene_short_name) == FALSE) {"
"0","      cds_exprs$feature_label <- as.character(cds_exprs$gene_short_name)"
"0","      cds_exprs$feature_label[is.na(cds_exprs$feature_label)] <- cds_exprs$f_id"
"0","    }"
"0","    else {"
"0","      cds_exprs$feature_label <- cds_exprs$f_id"
"0","    }"
"0","  }else {"
"0","    cds_exprs$feature_label <- cds_exprs$f_id"
"0","  }"
"0","  cds_exprs$f_id <- as.character(cds_exprs$f_id)"
"0","  cds_exprs$feature_label <- factor(cds_exprs$feature_label)"
"0","  new_data <- data.frame(pseudotime = colData(cds_subset)$pseudotime)"
"0","  model_tbl = fit_models(cds_subset, model_formula_str = trend_formula)"
"0","  model_expectation <- model_predictions(model_tbl, new_data = colData(cds_subset))"
"0","  colnames(model_expectation) <- colnames(cds_subset)"
"0","  expectation <- plyr::ddply(cds_exprs, plyr::.(f_id, Cell),"
"0","                             function(x) {"
"0","                               data.frame(expectation = model_expectation[x$f_id,"
"0","                                                                          x$Cell])"
"0","                             })"
"0","  cds_exprs <- merge(cds_exprs, expectation)"
"0","  cds_exprs$expression[cds_exprs$expression < min_expr] <- min_expr"
"0","  cds_exprs$expectation[cds_exprs$expectation < min_expr] <- min_expr"
"0","  if (!is.null(panel_order)) {"
"0","    cds_exprs$feature_label <- factor(cds_exprs$feature_label,"
"0","                                      levels = panel_order)"
"0","  }"
"0","  q <- ggplot(aes(pseudotime, expression), data = cds_exprs)"
"0","  if (!is.null(color_cells_by)) {"
"0","    q <- q + geom_point(aes_string(color = color_cells_by),"
"0","                        size = I(cell_size), position = position_jitter(horizontal_jitter,"
"0","                                                                        vertical_jitter))"
"0","    if (class(colData(cds_subset)[, color_cells_by]) == ""numeric"") {"
"0","      q <- q + viridis::scale_color_viridis(option = ""C"")"
"0","    }"
"0","  }else {"
"0","    q <- q + geom_point(size = I(cell_size), position = position_jitter(horizontal_jitter,"
"0","                                                                        vertical_jitter))"
"0","  }"
"0","  q <- q + geom_line(aes(x = pseudotime, y = expectation),"
"0","                     data = cds_exprs, size=line.size)"
"0","  q <- q + scale_y_log10() + facet_wrap(~feature_label, nrow = nrow,"
"0","                                        ncol = ncol, scales = ""free_y"")"
"0","  if (min_expr < 1) {"
"0","    q <- q + expand_limits(y = c(min_expr, 1))"
"0","  }"
"0","  q <- q + ylab(""Expression"")"
"0","  q <- q + xlab(""pseudotime"")"
"0","  #q <- q + monocle_theme_opts()"
"0","  q"
"0","}"
