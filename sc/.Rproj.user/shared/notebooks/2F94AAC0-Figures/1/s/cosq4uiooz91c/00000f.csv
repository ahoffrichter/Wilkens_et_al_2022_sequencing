"0","DoMultiBarHeatmap2 <- function(object, features = NULL, cells = NULL, group.by = ""ident"","
"0","                              additional.group.by = NULL, additional.group.sort.by = NULL, cols.use = NULL,"
"0","                              group.bar = TRUE, disp.min = -2.5, disp.max = NULL, slot = ""scale.data"", assay = NULL,"
"0","                              label = TRUE, size = 5.5, hjust = 0, angle = 45, raster = TRUE, draw.lines = TRUE,"
"0","                              lines.width = NULL, group.bar.height = 0.02, combine = TRUE, group.name=NULL, additional.group.name=NULL) {"
"0","  cells <- cells %||% colnames(x = object)"
"0","  if (is.numeric(x = cells)) {"
"0","    cells <- colnames(x = object)[cells]"
"0","  }"
"0","  assay <- assay %||% DefaultAssay(object = object)"
"0","  DefaultAssay(object = object) <- assay"
"0","  features <- features %||% VariableFeatures(object = object)"
"0","  features <- rev(x = unique(x = features))"
"0","  disp.max <- disp.max %||% ifelse(test = slot == ""scale.data"", yes = 2.5, no = 6)"
"0","  possible.features <- rownames(x = GetAssayData(object = object, slot = slot))"
"0","  if (any(!features %in% possible.features)) {"
"0","    bad.features <- features[!features %in% possible.features]"
"0","    features <- features[features %in% possible.features]"
"0","    if (length(x = features) == 0) {"
"0","      stop(""No requested features found in the "", slot, "" slot for the "", assay,"
"0","           "" assay."")"
"0","    }"
"0","    warning(""The following features were omitted as they were not found in the "","
"0","            slot, "" slot for the "", assay, "" assay: "", paste(bad.features, collapse = "", ""))"
"0","  }"
"0",""
"0","  if (!is.null(additional.group.sort.by)) {"
"0","    if (any(!additional.group.sort.by %in% additional.group.by)) {"
"0","      bad.sorts <- additional.group.sort.by[!additional.group.sort.by %in%"
"0","                                              additional.group.by]"
"0","      additional.group.sort.by <- additional.group.sort.by[additional.group.sort.by %in%"
"0","                                                             additional.group.by]"
"0","      if (length(x = bad.sorts) > 0) {"
"0","        warning(""The following additional sorts were omitted as they were not a subset of additional.group.by : "","
"0","                paste(bad.sorts, collapse = "", ""))"
"0","      }"
"0","    }"
"0","  }"
"0",""
"0","  data <- as.data.frame(x = as.matrix(x = t(x = GetAssayData(object = object, slot = slot)[features,"
"0","                                                                                           cells, drop = FALSE])))"
"0",""
"0","  object <- suppressMessages(expr = StashIdent(object = object, save.name = ""ident""))"
"0","  group.by <- group.by %||% ""ident"""
"0","  groups.use <- object[[c(group.by, additional.group.by[!additional.group.by %in%"
"0","                                                          group.by])]][cells, , drop = FALSE]"
"0","  plots <- list()"
"0","  for (i in group.by) {"
"0","    data.group <- data"
"0","    if (!is_null(additional.group.by)) {"
"0","      additional.group.use <- additional.group.by[additional.group.by != i]"
"0","      if (!is_null(additional.group.sort.by)) {"
"0","        additional.sort.use = additional.group.sort.by[additional.group.sort.by !="
"0","                                                         i]"
"0","      } else {"
"0","        additional.sort.use = NULL"
"0","      }"
"0","    } else {"
"0","      additional.group.use = NULL"
"0","      additional.sort.use = NULL"
"0","    }"
"0",""
"0","    group.use <- groups.use[, c(i, additional.group.use), drop = FALSE]"
"0",""
"0","    for (colname in colnames(group.use)) {"
"0","      if (!is.factor(x = group.use[[colname]])) {"
"0","        group.use[[colname]] <- factor(x = group.use[[colname]])"
"0","      }"
"0","    }"
"0",""
"0","    if (draw.lines) {"
"0","      lines.width <- lines.width %||% ceiling(x = nrow(x = data.group) * 0.0025)"
"0","      placeholder.cells <- sapply(X = 1:(length(x = levels(x = group.use[[i]])) *"
"0","                                           lines.width), FUN = function(x) {"
"0","                                             return(Seurat:::RandomName(length = 20))"
"0","                                           })"
"0","      placeholder.groups <- data.frame(rep(x = levels(x = group.use[[i]]),"
"0","                                           times = lines.width))"
"0","      group.levels <- list()"
"0","      group.levels[[i]] = levels(x = group.use[[i]])"
"0","      for (j in additional.group.use) {"
"0","        group.levels[[j]] <- levels(x = group.use[[j]])"
"0","        placeholder.groups[[j]] = NA"
"0","      }"
"0",""
"0","      colnames(placeholder.groups) <- colnames(group.use)"
"0","      rownames(placeholder.groups) <- placeholder.cells"
"0",""
"0","      group.use <- sapply(group.use, as.vector)"
"0","      rownames(x = group.use) <- cells"
"0",""
"0","      group.use <- rbind(group.use, placeholder.groups)"
"0",""
"0","      for (j in names(group.levels)) {"
"0","        group.use[[j]] <- factor(x = group.use[[j]], levels = group.levels[[j]])"
"0","      }"
"0",""
"0","      na.data.group <- matrix(data = NA, nrow = length(x = placeholder.cells),"
"0","                              ncol = ncol(x = data.group), dimnames = list(placeholder.cells, colnames(x = data.group)))"
"0","      data.group <- rbind(data.group, na.data.group)"
"0","    }"
"0",""
"0","    order_expr <- paste0(""order("", paste(c(i, additional.sort.use), collapse = "",""),"
"0","                         "")"")"
"0","    group.use = with(group.use, group.use[eval(parse(text = order_expr)), , drop = F])"
"0",""
"0","    plot <- Seurat:::SingleRasterMap(data = data.group, raster = raster, disp.min = disp.min,"
"0","                                     disp.max = disp.max, feature.order = features, cell.order = rownames(x = group.use),"
"0","                                     group.by = group.use[[i]])"
"0",""
"0","    if (group.bar) {"
"0","      pbuild <- ggplot_build(plot = plot)"
"0","      group.use2 <- group.use"
"0","      cols <- list()"
"0","      na.group <- Seurat:::RandomName(length = 20)"
"0","      for (colname in rev(x = colnames(group.use2))) {"
"0","        if (colname == i) {"
"0","          colid = group.name"
"0","        } else {"
"0","          colid = additional.group.name"
"0","        }"
"0",""
"0","        # Default"
"0","        cols[[colname]] <- c((scales::hue_pal())(length(x = levels(x = group.use[[colname]]))))"
"0",""
"0","        # Overwrite if better value is provided"
"0","        if (!is_null(cols.use[[colname]])) {"
"0","          req_length = length(x = levels(group.use))"
"0","          if (length(cols.use[[colname]]) < req_length) {"
"0","            warning(""Cannot use provided colors for "", colname, "" since there aren't enough colors."")"
"0","          } else {"
"0","            if (!is_null(names(cols.use[[colname]]))) {"
"0","              if (all(levels(group.use[[colname]]) %in% names(cols.use[[colname]]))) {"
"0","                cols[[colname]] <- as.vector(cols.use[[colname]][levels(group.use[[colname]])])"
"0","              } else {"
"0","                warning(""Cannot use provided colors for "", colname, "" since all levels ("","
"0","                        paste(levels(group.use[[colname]]), collapse = "",""), "") are not represented."")"
"0","              }"
"0","            } else {"
"0","              cols[[colname]] <- as.vector(cols.use[[colname]])[c(1:length(x = levels(x = group.use[[colname]])))]"
"0","            }"
"0","          }"
"0","        }"
"0",""
"0","        # Add white if there's lines"
"0","        if (draw.lines) {"
"0","          levels(x = group.use2[[colname]]) <- c(levels(x = group.use2[[colname]]),"
"0","                                                 na.group)"
"0","          group.use2[placeholder.cells, colname] <- na.group"
"0","          cols[[colname]] <- c(cols[[colname]], ""#FFFFFF"")"
"0","        }"
"0","        names(x = cols[[colname]]) <- levels(x = group.use2[[colname]])"
"0",""
"0","        y.range <- diff(x = pbuild$layout$panel_params[[1]]$y.range)"
"0","        y.pos <- max(pbuild$layout$panel_params[[1]]$y.range) + y.range *"
"0","          0.015"
"0","        y.max <- y.pos + group.bar.height * y.range"
"0","        pbuild$layout$panel_params[[1]]$y.range <- c(pbuild$layout$panel_params[[1]]$y.range[1],"
"0","                                                     y.max)"
"0",""
"0","        plot <- suppressMessages(plot + annotation_raster(raster = t(x = cols[[colname]][group.use2[[colname]]]),"
"0","                                                          xmin = -Inf, xmax = Inf, ymin = y.pos, ymax = y.max) + annotation_custom(grob = grid::textGrob(label = colid,"
"0","                                                                                                                                                         hjust = 0, gp = gpar(cex = 0.75)), ymin = mean(c(y.pos, y.max)),"
"0","                                                                                                                                   ymax = mean(c(y.pos, y.max)), xmin = Inf, xmax = Inf) + coord_cartesian(ylim = c(0,"
"0","                                                                                                                                                                                                                    y.max), clip = ""off""))"
"0",""
"0","        if ((colname == i) && label) {"
"0","          x.max <- max(pbuild$layout$panel_params[[1]]$x.range)"
"0","          x.divs <- pbuild$layout$panel_params[[1]]$x.major %||% pbuild$layout$panel_params[[1]]$x$break_positions()"
"0","          group.use$x <- x.divs"
"0","          label.x.pos <- tapply(X = group.use$x, INDEX = group.use[[colname]],"
"0","                                FUN = median) * x.max"
"0","          label.x.pos <- data.frame(group = names(x = label.x.pos), label.x.pos)"
"0","          plot <- plot + geom_text(stat = ""identity"", data = label.x.pos,"
"0","                                   aes_string(label = ""group"", x = ""label.x.pos""), y = y.max + y.max *"
"0","                                     0.03 * 0.5, angle = angle, hjust = hjust, size = size)"
"0","          plot <- suppressMessages(plot + coord_cartesian(ylim = c(0, y.max +"
"0","                                                                     y.max * 0.002 * max(nchar(x = levels(x = group.use[[colname]]))) *"
"0","                                                                     size), clip = ""off""))"
"0","        }"
"0","      }"
"0","    }"
"0","    plot <- plot + theme(line = element_blank())"
"0","    plots[[i]] <- plot"
"0","  }"
"0","  if (combine) {"
"0","    plots <- CombinePlots(plots = plots)"
"0","  }"
"0","  return(plots)"
"0","}"
